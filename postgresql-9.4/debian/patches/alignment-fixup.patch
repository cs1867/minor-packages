--- a/src/backend/replication/logical/reorderbuffer.c
+++ b/src/backend/replication/logical/reorderbuffer.c
@@ -2281,15 +2281,13 @@ static void
 ReorderBufferRestoreChange(ReorderBuffer *rb, ReorderBufferTXN *txn,
 						   char *data)
 {
-	ReorderBufferDiskChange *ondisk;
 	ReorderBufferChange *change;
 
-	ondisk = (ReorderBufferDiskChange *) data;
-
 	change = ReorderBufferGetChange(rb);
 
 	/* copy static part */
-	memcpy(change, &ondisk->change, sizeof(ReorderBufferChange));
+	memcpy(change, data + offsetof(ReorderBufferDiskChange, change),
+		   sizeof(ReorderBufferChange));
 
 	data += sizeof(ReorderBufferDiskChange);
 
@@ -2303,7 +2301,11 @@ ReorderBufferRestoreChange(ReorderBuffer
 		case REORDER_BUFFER_CHANGE_DELETE:
 			if (change->data.tp.oldtuple)
 			{
-				Size		tuplelen = ((HeapTuple) data)->t_len;
+				uint32		tuplelen;
+
+				/* Must get tuplelen the hard way in case it's misaligned */
+				memcpy(&tuplelen, data + offsetof(HeapTupleData, t_len),
+					   sizeof(uint32));
 
 				change->data.tp.oldtuple =
 					ReorderBufferGetTupleBuf(rb, tuplelen - offsetof(HeapTupleHeaderData, t_bits));
@@ -2324,7 +2326,11 @@ ReorderBufferRestoreChange(ReorderBuffer
 
 			if (change->data.tp.newtuple)
 			{
-				Size		tuplelen = ((HeapTuple) data)->t_len;
+				uint32		tuplelen;
+
+				/* Must get tuplelen the hard way in case it's misaligned */
+				memcpy(&tuplelen, data + offsetof(HeapTupleData, t_len),
+					   sizeof(uint32));
 
 				change->data.tp.newtuple =
 					ReorderBufferGetTupleBuf(rb, tuplelen - offsetof(HeapTupleHeaderData, t_bits));
@@ -2346,15 +2352,15 @@ ReorderBufferRestoreChange(ReorderBuffer
 			break;
 		case REORDER_BUFFER_CHANGE_INTERNAL_SNAPSHOT:
 			{
-				Snapshot	oldsnap;
+				SnapshotData oldsnap;
 				Snapshot	newsnap;
 				Size		size;
 
-				oldsnap = (Snapshot) data;
+				memcpy(&oldsnap, data, sizeof(SnapshotData));
 
 				size = sizeof(SnapshotData) +
-					sizeof(TransactionId) * oldsnap->xcnt +
-					sizeof(TransactionId) * (oldsnap->subxcnt + 0);
+					sizeof(TransactionId) * oldsnap.xcnt +
+					sizeof(TransactionId) * oldsnap.subxcnt;
 
 				change->data.snapshot = MemoryContextAllocZero(rb->context, size);
 
@@ -2365,6 +2371,8 @@ ReorderBufferRestoreChange(ReorderBuffer
 					(((char *) newsnap) + sizeof(SnapshotData));
 				newsnap->subxip = newsnap->xip + newsnap->xcnt;
 				newsnap->copied = true;
+
+				data += size;
 				break;
 			}
 			/* the base struct contains all the data, easy peasy */
